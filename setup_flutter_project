#!/bin/bash

# Function to display a note to the user
show_note() {
  echo -e "* Hi ðŸ‘‹, \n\nHope Flutter, Git, Android Studio, and Xcode are all installed on your system."
}

# Function to prompt the user for input with a default value
prompt() {
  local message="$1"
  local default="$2"
  read -p "$message [$default]: " input
  echo "${input:-$default}"
}

# Function to show a loading spinner
show_loading() {
  local pid=$1 # Process Id of the previous running command
  local delay=0.1
  local spinner='|/-\'
  echo -n "Loading... "
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    for i in $(seq 0 3); do
      echo -ne "\b${spinner:i:1}"
      sleep $delay
    done
  done
  echo -ne "\b Done!"
  echo ""
}

# Display the welcome note
show_note

# Prompt the user for the package name
package_name=$(prompt "Please enter the package name for your Flutter app (e.g., com.benjith.calculator)" "com.example.app")

# Create a new Flutter app with the specified package name
flutter create --org "${package_name%.*}" --project-name "${package_name##*.}" "${package_name##*.}" &

# Show loading animation while flutter create runs
show_loading $!

# Move into the Flutter project directory
cd "${package_name##*.}" || exit

# Ask the user if they want to initialize a Git repository
git_init=$(prompt "Would you like to initialize a Git repository in this project? (Y/N)" "Y")

if [[ "$git_init" =~ ^[Yy]$ ]]; then
  git init
  echo "Git repository initialized."

  # Ask the user if they want to add a remote repository
  git_remote=$(prompt "Would you like to add a remote repository? (Y/N)" "Y")

  if [[ "$git_remote" =~ ^[Yy]$ ]]; then
    remote_url=$(prompt "Please enter the remote Git URL")
    git remote add origin "$remote_url"
    git branch -M main
    echo "Remote repository added and branch set to main."
  fi
fi

# Create necessary directories inside the Flutter project
mkdir -p assets/images/{1.5x,2.0x,3.0x,4.0x} assets/svgs assets/icons

echo "Directories for assets have been created."

# Replace pubspec.yaml with the provided file contents or modify it in place
pubspec_file="pubspec.yaml"

# Copy the new pubspec.yaml content, replacing the placeholder with the project name
cat <<EOF > "$pubspec_file"
name: ${package_name##*.}
description: "A new Flutter project."

publish_to: 'none' # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

flutter_version: '3.16.5'

environment:
  sdk: '>=3.2.3 <4.0.0'

dependencies:
  flutter:
    sdk: flutter
  # common
  cupertino_icons: ^1.0.2
  dio: ^5.4.0
  firebase_core: ^2.24.2
  firebase_analytics: ^10.8.0
  firebase_crashlytics: ^3.4.9
  cached_network_image: ^3.3.1
  google_fonts: ^6.1.0
  gap: ^3.0.1
  pretty_dio_logger: ^1.3.1
  intl: ^0.19.0
  get_it: ^7.6.6
  flutter_svg: ^2.0.9
  country_picker: ^2.0.23
  flutter_spinkit: ^5.2.0
  crypto: ^3.0.3
  url_launcher: ^6.2.3

dev_dependencies:
  flutter_test:
    sdk: flutter

  flutter_lints: ^2.0.0

  build_runner: ^2.4.7
  flutter_gen_runner: ^5.4.0
  flutter_launcher_icons: ^0.13.1

flutter_gen:
  output: lib/gen/ # Optional (default: lib/gen/)
  line_length: 80 # Optional (default: 80)

  # Optional
  integrations:
    flutter_svg: true
    flare_flutter: true
    rive: true
    lottie: true

  assets:
    exclude:
      [
        assets/image/1.5x/*,
        assets/image/2.0x/*,
        assets/image/3.0x/*,
        assets/image/4.0x/*,
      ]  

  colors:
    inputs:
      - assets/colors/colors.xml

flutter_launcher_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/icons/launcher_icon.png"
  min_sdk_android: 21 # android min sdk min:16, default 21
  remove_alpha_ios: true

flutter:
  uses-material-design: true

  assets:
    - assets/icons/
    - assets/images/
    - assets/svgs/
EOF

echo "pubspec.yaml file has been updated."

# Run flutter pub get to fetch dependencies
flutter pub get &

# Show loading animation while flutter pub get runs
show_loading $!

# Display end credits
echo -e "\nScript created by Benjith MP."

echo "Flutter project setup is complete!"
